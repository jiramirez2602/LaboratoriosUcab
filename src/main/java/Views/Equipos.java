package Views;

import controller.ListaDeEquipos;
import controller.ListaLaboratorios;
import java.awt.BorderLayout;
import java.awt.Color;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Equipo;
import model.Laboratorio;
import model.Usuario;
import Views.EquiposExcel;
import java.text.SimpleDateFormat;

public class Equipos extends javax.swing.JPanel {

    private ListaLaboratorios listalaboratorios;
    private Usuario userActual;
    private ListaDeEquipos listaequipos;
    private DefaultTableModel tableModelEquipos;
    private HashMap<Integer, String> idMapEquipos;

    public Equipos(Usuario user, ListaLaboratorios listaLab, ListaDeEquipos equipos) {
        this.listalaboratorios = listaLab;
        this.listaequipos = equipos;
        this.userActual = user;
        idMapEquipos = new HashMap<>();
        initComponents();
        InitStyles();
        inicializarTablaEquipos(); 
        actualizarTablaEquipos();
        bloquearPorRol(userActual);
    }

    private void inicializarTablaEquipos() {
        String[] columnas = {"Nombre","Tipo de Productos","Inventario","Observaciones","Numero de Activo","Proximo Mantenimiento","Proxima Calibracion","Descripcion","Laboratorio"};
        tableModelEquipos = new DefaultTableModel(columnas, 0);
        jTable1.setModel(tableModelEquipos);
    }
    
    private void bloquearPorRol(Usuario user){
        if(user.verificarRol(user,"Invitado")){
            BotonCrearEquipo.setEnabled(false);
            BotonEliminarEquipo.setEnabled(false);
            BotonModificarEquipo.setEnabled(false);
        }
    }

    private void actualizarTablaEquipos() {
        tableModelEquipos.setRowCount(0);
        idMapEquipos.clear();
        int row = 0;

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);

        try {
            ArrayList<Equipo> equipos=null;
            if(userActual.getRolUsuario().equals("Tecnico")){
                equipos= listaequipos.listarEquipoPorUsuario(userActual);
            }
            else if((userActual.getRolUsuario().equals("Administrador"))||(userActual.getRolUsuario().equals("Invitado"))){
                equipos = listaequipos.getListaEquipos();
            }
            SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy");

            for (Equipo equipo : equipos) {
                Laboratorio laboratorio = listalaboratorios.listarLaboratorio(equipo.getLaboratorio());
                String nombreLaboratorio = (laboratorio != null) ? laboratorio.getNombreLaboratorio() : "Desconocido";

                String proximoMantenimiento = (equipo.getProximoMantenimiento() != null) ? dateFormatter.format(equipo.getProximoMantenimiento()) : "N/A";
                String proximaCalibracion = (equipo.getProximaCalibracion() != null) ? dateFormatter.format(equipo.getProximaCalibracion()) : "N/A";

                Object[] fila = {
                    equipo.getNombreProducto(),
                    equipo.getTipoDeProducto(),
                    equipo.getInventarioExistente(),
                    equipo.getObservaciones(),
                    equipo.getNumeroActivo(),
                    proximoMantenimiento,
                    proximaCalibracion,
                    equipo.getDescripcion(),
                    nombreLaboratorio
                };
                tableModelEquipos.addRow(fila);

                idMapEquipos.put(row, equipo.getId());

                for (int i = 0; i < tableModelEquipos.getColumnCount(); i++) {
                    jTable1.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
                }

                row++;
            }
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Error al obtener la lista de equipos.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        jTable1.setDefaultEditor(Object.class, null); 
    }

    private void InitStyles() {
        title.putClientProperty("FlatLaf.styleClass", "h1");
        title.setForeground(Color.black);
    }

    private void MostrarJPanel(JPanel p) {
        p.setSize(1392, 698);
        p.setLocation(0, 0);
        BackgroundEquipos.removeAll();
        BackgroundEquipos.add(p, BorderLayout.CENTER);
        BackgroundEquipos.revalidate();
        BackgroundEquipos.repaint();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BackgroundEquipos = new javax.swing.JPanel();
        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        BotonEliminarEquipo = new javax.swing.JButton();
        BotonModificarEquipo = new javax.swing.JButton();
        BotonCrearEquipo = new javax.swing.JButton();
        BotonExportarEquipo = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        BackgroundEquipos.setBackground(new java.awt.Color(255, 255, 255));

        title.setText("Equipos");

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        BotonEliminarEquipo.setBackground(new java.awt.Color(18, 90, 173));
        BotonEliminarEquipo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BotonEliminarEquipo.setForeground(new java.awt.Color(255, 255, 255));
        BotonEliminarEquipo.setText("Borrar");
        BotonEliminarEquipo.setBorderPainted(false);
        BotonEliminarEquipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonEliminarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonEliminarEquipoActionPerformed(evt);
            }
        });

        BotonModificarEquipo.setBackground(new java.awt.Color(18, 90, 173));
        BotonModificarEquipo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BotonModificarEquipo.setForeground(new java.awt.Color(255, 255, 255));
        BotonModificarEquipo.setText("Editar");
        BotonModificarEquipo.setBorderPainted(false);
        BotonModificarEquipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonModificarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonModificarEquipoActionPerformed(evt);
            }
        });

        BotonCrearEquipo.setBackground(new java.awt.Color(18, 90, 173));
        BotonCrearEquipo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BotonCrearEquipo.setForeground(new java.awt.Color(255, 255, 255));
        BotonCrearEquipo.setText("Nuevo");
        BotonCrearEquipo.setBorderPainted(false);
        BotonCrearEquipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonCrearEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCrearEquipoActionPerformed(evt);
            }
        });

        BotonExportarEquipo.setBackground(new java.awt.Color(18, 90, 173));
        BotonExportarEquipo.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        BotonExportarEquipo.setForeground(new java.awt.Color(255, 255, 255));
        BotonExportarEquipo.setText("Exportar");
        BotonExportarEquipo.setBorderPainted(false);
        BotonExportarEquipo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonExportarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonExportarEquipoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BackgroundEquiposLayout = new javax.swing.GroupLayout(BackgroundEquipos);
        BackgroundEquipos.setLayout(BackgroundEquiposLayout);
        BackgroundEquiposLayout.setHorizontalGroup(
            BackgroundEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackgroundEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BackgroundEquiposLayout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(699, 699, 699))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, BackgroundEquiposLayout.createSequentialGroup()
                        .addGap(332, 332, 332)
                        .addComponent(BotonExportarEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonCrearEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonModificarEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BotonEliminarEquipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(50, 50, 50))
                    .addGroup(BackgroundEquiposLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(22, 22, 22))))
        );
        BackgroundEquiposLayout.setVerticalGroup(
            BackgroundEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackgroundEquiposLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addGap(48, 48, 48)
                .addGroup(BackgroundEquiposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonEliminarEquipo)
                    .addComponent(BotonModificarEquipo)
                    .addComponent(BotonCrearEquipo)
                    .addComponent(BotonExportarEquipo))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackgroundEquipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BackgroundEquipos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed

    }//GEN-LAST:event_jTable1MousePressed

    private void BotonCrearEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCrearEquipoActionPerformed
        MostrarJPanel(new CrearEquipos(userActual,listalaboratorios,listaequipos));
    }//GEN-LAST:event_BotonCrearEquipoActionPerformed

    private void BotonEliminarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonEliminarEquipoActionPerformed
        int selectedRow = jTable1.getSelectedRow();

        if (selectedRow != -1) {
            String idEquipoAEliminar = idMapEquipos.get(selectedRow);

            if (idEquipoAEliminar != null && !idEquipoAEliminar.isEmpty()) {
                int confirmacion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de eliminar este equipo?", "Confirmar Eliminación", JOptionPane.YES_NO_OPTION);

                if (confirmacion == JOptionPane.YES_OPTION) {
                    boolean eliminacionExitosa = listaequipos.eliminarEquipo(userActual, idEquipoAEliminar);

                    if (eliminacionExitosa) {
                        JOptionPane.showMessageDialog(null, "Equipo eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        actualizarTablaEquipos();
                    } else {
                        JOptionPane.showMessageDialog(null, "Error al eliminar el equipo.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ningún equipo para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_BotonEliminarEquipoActionPerformed

    private void BotonModificarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonModificarEquipoActionPerformed
       int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
        String idEquipo = idMapEquipos.get(selectedRow);
        Equipo equipo = null;
        try {
            equipo = listaequipos.listarEquipo(idEquipo);
        } catch (ParseException ex) {
            Logger.getLogger(Equipos.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (equipo != null) {
            MostrarJPanel(new ModificarEquipos(userActual, listalaboratorios, listaequipos, equipo));
        } else {
            JOptionPane.showMessageDialog(null, "Equipo no encontrado", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BotonModificarEquipoActionPerformed

    private void BotonExportarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonExportarEquipoActionPerformed
        MostrarJPanel(new EquiposExcel(userActual,listalaboratorios,listaequipos));
    }//GEN-LAST:event_BotonExportarEquipoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackgroundEquipos;
    private javax.swing.JButton BotonCrearEquipo;
    private javax.swing.JButton BotonEliminarEquipo;
    private javax.swing.JButton BotonExportarEquipo;
    private javax.swing.JButton BotonModificarEquipo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}